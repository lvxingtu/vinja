run [className]        --run class, example : run org.fake.test.Main 
                         if className omitted, the current edited class is used.
runtest [className]    --run class as junit test case
attach [host] port     --attach to target jvm, if there's only one argument, attach to local:port
disconnect             --disconnect from debuged vm session
shutdown               --shutdown the target process
hide                   --hide jdb buffer
exit                   --exit jdb


break  n  [if {cond}] [do {cmds}]   
--create breakpoint on line n(alias b)
   example: "b 10 if {a > 5}",  "break 20 do {print a; setvalue b 20}"

tbreak n               --temp breakpoint on line n(alias tb)
enable  {n|all}        --enable breakpoint on line n, or enable all 
disable {n|all}        --disable breakpoint on line n, or disable all 
clear  n               --remove breakpoint on line n(alias cl)
breakpoints            --list breakpoints,including watchpoints
watch fieldname        --add watch field, suspended program when the field been written
rwatch fieldname       --add watch field, suspended program when the field been read
awatch fieldname       --add watch field, suspended program when the field been written or field been read
unwatch fieldname      --remove watch field

print expression       --eval the value of the expression(alias p,eval)
qeval                  --eval expression in current and previous line (try this!)(map in normal mode '<leader>k')
reftype expression     --print the type of the expression(alias whatis)
inspect expression     --print the non-static field value of the inspect expression(alias i)
sinspect expression    --print the static field value of the inspect expression
locals                 --list stack frame local variables
fields                 --list fields (only non-static)
sfields                --list fields (only static)
geval                  --like print(eval) but accept "*" in expression (alias ge, gp), exampe : gp item*
ginspect               --like inspect but accept "*" in expression(alias gi) 

list n                --scroll source code to line n, if n is omitted, scroll to next page(alias:l)
threads               --list threads state
thread threadId       --change current thread(the threadId can been obtain in threads command's output)
frames                --list frame info in current stack(alias:where,backtrace,bt)
frame n               --change current frame to n-th frame in current stack, start with 0
up                    --change current frame to current frame -1
down                  --change current frame to current frame +1

setvalue  varname value-expression      --set varname's value to result of value-expression

step_into     --step into method ,key <F5> (alias:step,s)
step_over     --step over one line,key <F6>(alias:next,n)
step_return   --step return , key <F7>(alias:finish)
step_out      --step out current loop
resume        --resume current thread, key <F8>(alias:continue,c)
resume_all    --resume all suspended thread
until line    --run to line(alias:u)

catch  exception-class    --create exception request
ignore exception-class    --remove exception request

display expression     --add display variable(when program is suspended,alias di)
displayi expression    --add inspect variable(when program is suspended,alias dii)
show_display           --list current watched variables
undisplay expression   --remove displayed variable

Use <c-i> to toggle quickstep mode:
  l   -->step_into
  j   -->step_over
  h   -->step_return
  u   -->step_out
  c   -->resume
  v   -->locals
  w   -->frames
  nG  -->run until nth line
  e   -->eval all expression in the current and previous line

